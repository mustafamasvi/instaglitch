{
    "id": "crossZoom",
    "name": "CrossZoom",
    "settings": [
        {
          "id": "iTime",
          "defaultValue": 0.5,
          "key": "iTime",
          "name": "iTime",
          "type": "time"
        },
        {
          "id": "strength",
          "defaultValue": 4.0,
          "key": "strength",
          "name": "strength",
          "type": "float",
          "minValue": 1.0,
          "maxValue": 10.0
        }
      ],
    "fragmentShader": "const float PI = 3.141592653589793;\n float Linear_ease(in float begin, in float change, in float duration, in float time) {\n return change * time / duration + begin;\n }\n \n float Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {\n if (time == 0.0)\n return begin;\n else if (time == duration)\n return begin + change;\n time = time / (duration / 2.0);\n if (time < 1.0)\n return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;\n return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;\n }\n \n float Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {\n return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;\n }\n \n float rand (vec2 co) {\n return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n }\n \n vec3 crossFade(in vec2 uv, in float dissolve) {\n return mix(texture2D(iTexture, uv).rgb, texture2D(iTexture, uv).rgb, dissolve);\n }\n \n vec4 transition(vec2 uv) {\n vec2 texCoord = uv;\n \n vec2 center = vec2(Linear_ease(0.25, 0.5, 1.0, iTime), 0.5);\n float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, iTime);\n \n float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, iTime);\n \n vec3 color = vec3(0.0);\n float total = 0.0;\n vec2 toCenter = center - texCoord;\n \n float offset = rand(uv);\n \n for (float t = 0.0; t <= 40.0; t++) {\n float percent = (t + offset) / 40.0;\n float weight = 4.0 * (percent - percent * percent);\n color += crossFade(texCoord + toCenter * percent * strength, dissolve) * weight;\n total += weight;\n }\n return vec4(color / total, 1.0);\n }\n \n void main()\n {\n vec2 uv = gl_FragCoord.xy / iResolution.xy;\n gl_FragColor = transition(uv);\n }"
  }
  