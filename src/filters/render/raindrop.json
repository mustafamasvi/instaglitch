{
    "id": "rainDrop",
    "name": "Rain Drop",
    "settings": [
      {
        "id": "RAINSPEED",
        "key": "RAINSPEED",
        "defaultValue": 0.3,
        "name": "Rain Speed",
        "type": "float"
      },
      {
        "id": "RANSIZE",
        "key": "RANSIZE",
        "defaultValue": 0.7,
        "name": "Rain Size",
        "type": "float"
      },
      {
        "id": "TIME",
        "key": "iTime",
        "defaultValue": 1,
        "name": "Time",
        "type": "time"
      }
    ],
    "fragmentShader" : "#define MAX_RADIUS 2\n #define DOUBLE_HASH 0\n #define HASHSCALE1 .1031\n #define HASHSCALE3 vec3(.1031, .1030, .0973)\n \n float hash12(vec2 p)\n {\n vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n p3 += dot(p3, p3.yzx + 19.19);\n return fract((p3.x + p3.y) * p3.z);\n }\n \n vec2 hash22(vec2 p)\n {\n vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n p3 += dot(p3, p3.yzx+19.19);\n return fract((p3.xx+p3.yz)*p3.zy);\n \n }\n \n void main(){\n float resolution = 10. * exp2(-3.*RANSIZE);\n vec2 uv = gl_FragCoord.xy / iResolution.y * resolution;\n vec2 uv2 = gl_FragCoord.xy / iResolution.xy* resolution;\n vec2 p0 = floor(uv);\n \n vec2 circles = vec2(0.);\n for (int j = -MAX_RADIUS; j <= MAX_RADIUS; ++j)\n {\n for (int i = -MAX_RADIUS; i <= MAX_RADIUS; ++i)\n {\n vec2 pi = p0 + vec2(i, j);\n #if DOUBLE_HASH\n vec2 hsh = hash22(pi);\n #else\n vec2 hsh = pi;\n #endif\n vec2 p = pi + hash22(hsh);\n \n float t = fract(RAINSPEED*iTime + hash12(hsh));\n vec2 v = p - uv;\n float d = length(v) - (float(MAX_RADIUS) + 1.)*t;\n \n float h = 1e-3;\n float d1 = d - h;\n float d2 = d + h;\n float p1 = sin(31.*d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);\n float p2 = sin(31.*d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);\n circles += 0.5 * normalize(v) * ((p2 - p1) / (2. * h) * (1. - t) * (1. - t));\n }\n }\n circles /= float((MAX_RADIUS*2+1)*(MAX_RADIUS*2+1));\n \n float intensity = mix(0.01, 0.15, smoothstep(0.1, 0.6, abs(fract(0.05*iTime + 0.5)*2.-1.)));\n vec3 n = vec3(circles, sqrt(1. - dot(circles, circles)));\n vec3 color = texture2D(iTexture, uv2/resolution - intensity*n.xy).rgb + 5.*pow(clamp(dot(n, normalize(vec3(1., 0.7, 0.5))), 0., 1.), 6.);\n gl_FragColor = vec4(color, 1.0);\n }"

  }
  